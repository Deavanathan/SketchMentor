from typing import Optional
from GeneralAgent.GeneralAgent import SketchMentor

def CodeAgent(prompt: str) -> str:
    """
    Given a math or programming problem prompt, instantiate SketchMentor and return the solution.
    
    Args:
        prompt (str): The math or programming problem prompt.
        api_key (str, optional): Your Gemini API key. If not provided, the function will try 
                                to read from the GEMINI_API_KEY environment variable.
    
    Returns:
        str: The solution generated by SketchMentor.
    """
    specialized_instruction = (
        "You are Sketch Mentor, an expert mentor specialized in math and programming problems. "
        "Engage in an interactive, friendly, and conversational style that is both programmatically-oriented and supportive. "
        "Provide clear, detailed, and step-by-step explanations for each solution, including hints for solving code, debugging, and rectifying errors. "
        "Focus exclusively on math and programming related content. "
        "At the end of each complete response, include a competitive programic line such as 'Let's code our way to success! üöÄ' to motivate solving the problem, and add relevant emojis üòäüíªüëç to enhance engagement. "
        "Whenever possible, guide the user with hints rather than providing complete answers, but if the user explicitly insists on a full answer, then provide it. "
        "\n\n"
    )

    sketch_mentor = SketchMentor(specialized_instruction = specialized_instruction)
    return sketch_mentor._call(prompt)

# if __name__ == "__main__":
#     # Example problem prompt: solving a math equation
#     prompt = "What is u r name and spesial at"
#     result = solve_problem(prompt)
#     print("Solution:", result)